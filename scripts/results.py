# -*- coding: utf-8 -*-
"""results.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hvy6WEDINY_a0cGEW9wx0l2mkkLoDlT6
"""

import re

# Function to parse the artifacts.log file
def parse_artifacts_log(file_path):
    with open(file_path, 'r') as file:
        log_content = file.readlines()

    artifacts_data = {}
    for line in log_content:
        # Modified to exclude 'x4.png' or '.png' from the image names
        match = re.search(r'Processed (\S+?)(x4\.png|\.png)? with (\S+ artifact), random area: (\d+)', line)
        if match:
            image_name, _, artifact, area = match.groups()
            artifacts_data[image_name] = {'artifact': artifact, 'area': int(area)}
    return artifacts_data

def parse_sr_log(file_path):
    with open(file_path, 'r') as file:
        log_content = file.readlines()

    data = {}
    for line in log_content:
        # Modified to correctly parse image names without '.png'
        match = re.search(r': (\S+?)(?:x4\.png|\.png)? - PSNR: (\S+) dB; SSIM: (\S+).', line)
        if match:
            image_name, psnr, ssim = match.groups()
            data[image_name] = {'PSNR': float(psnr), 'SSIM': float(ssim)}

    return data

def parse_swin_log(file_path):
    with open(file_path, 'r') as file:
        log_content = file.readlines()

    data = {}
    for line in log_content:
        # Modified to correctly parse image names without '.png'
        match = re.search(r': (\S+?) - PSNR: (\S+) dB; SSIM: (\S+).', line)
        if match:
            image_name, psnr, ssim = match.groups()
            data[image_name] = {'PSNR': float(psnr), 'SSIM': float(ssim)}

    return data

# File paths in Colab
artifacts_log_path = '/content/artifacts.log'
swinir_log_path = '/content/swinir.log'
msrresnet_log_path = '/content/msrresnet.log'
dncnn_log_path = '/content/dncnn.log'

# Parsing both log files
artifacts_data = parse_artifacts_log(artifacts_log_path)
swinir_data = parse_swin_log(swinir_log_path)
msrresnet_data = parse_sr_log(msrresnet_log_path)
dncnn_data = parse_sr_log(dncnn_log_path)

# Adjusting the merge function to only include images present in all three datasets and exclude 'N/A' values

def merge_all_data(artifacts_data, swinir_data, msrresnet_data, dncnn_data):
    combined_data = {}

    for image_name, artifact_info in artifacts_data.items():
        # Only include images present in all datasets
        if image_name in msrresnet_data and image_name in dncnn_data and image_name in swinir_data:
            combined_entry = artifact_info.copy()
            combined_entry.update({
                'swinir PSNR': swinir_data[image_name]['PSNR'],
                'swinir SSIM': swinir_data[image_name]['SSIM'],
                'msrresnet PSNR': msrresnet_data[image_name]['PSNR'],
                'msrresnet SSIM': msrresnet_data[image_name]['SSIM'],
                'dncnn PSNR': dncnn_data[image_name]['PSNR'],
                'dncnn SSIM': dncnn_data[image_name]['SSIM']
            })
            combined_data[image_name] = combined_entry


    return combined_data

# Merging the data from all three sources
combined_data = merge_all_data(artifacts_data, swinir_data, msrresnet_data, dncnn_data)

# Displaying a few combined entries as a preview
list_combined_data=list(combined_data.items())  # Display first 10 entries for a preview

list(combined_data.items())

def calculate_averages(combined_data):
    artifact_stats = {}

    for image_name, data in combined_data.items():
        artifact_type = data['artifact']

        # Initialize artifact entry if not already present
        if artifact_type not in artifact_stats:
            artifact_stats[artifact_type] = {
                'swinir': {'total_PSNR': 0, 'total_SSIM': 0, 'count': 0},
                'msrresnet': {'total_PSNR': 0, 'total_SSIM': 0, 'count': 0},
                'dncnn': {'total_PSNR': 0, 'total_SSIM': 0, 'count': 0}
            }

        if 'swinir PSNR' in data and 'swinir SSIM' in data:
            artifact_stats[artifact_type]['swinir']['total_PSNR'] += data['swinir PSNR']
            artifact_stats[artifact_type]['swinir']['total_SSIM'] += data['swinir SSIM']
            artifact_stats[artifact_type]['swinir']['count'] += 1

        # Add MSRResNet data if available
        if 'msrresnet PSNR' in data and 'msrresnet SSIM' in data:
            artifact_stats[artifact_type]['msrresnet']['total_PSNR'] += data['msrresnet PSNR']
            artifact_stats[artifact_type]['msrresnet']['total_SSIM'] += data['msrresnet SSIM']
            artifact_stats[artifact_type]['msrresnet']['count'] += 1

        # Add DNCNN data if available
        if 'dncnn PSNR' in data and 'dncnn SSIM' in data:
            artifact_stats[artifact_type]['dncnn']['total_PSNR'] += data['dncnn PSNR']
            artifact_stats[artifact_type]['dncnn']['total_SSIM'] += data['dncnn SSIM']
            artifact_stats[artifact_type]['dncnn']['count'] += 1



   # Calculating averages for each artifact type
    averages = {}
    for artifact, stats in artifact_stats.items():
        averages[artifact] = {
            'swinir_avg_PSNR': stats['swinir']['total_PSNR'] / stats['swinir']['count'] if stats['swinir']['count'] > 0 else None,
            'swinir_avg_SSIM': stats['swinir']['total_SSIM'] / stats['swinir']['count'] if stats['swinir']['count'] > 0 else None,
            'msrresnet_avg_PSNR': stats['msrresnet']['total_PSNR'] / stats['msrresnet']['count'] if stats['msrresnet']['count'] > 0 else None,
            'msrresnet_avg_SSIM': stats['msrresnet']['total_SSIM'] / stats['msrresnet']['count'] if stats['msrresnet']['count'] > 0 else None,
            'dncnn_avg_PSNR': stats['dncnn']['total_PSNR'] / stats['dncnn']['count'] if stats['dncnn']['count'] > 0 else None,
            'dncnn_avg_SSIM': stats['dncnn']['total_SSIM'] / stats['dncnn']['count'] if stats['dncnn']['count'] > 0 else None


            }

    return averages

# Calculate averages
artifact_averages = calculate_averages(combined_data)

# Displaying the average values for each artifact type
for artifact, avg_values in artifact_averages.items():
    print(f"Artifact: {artifact}, Averages: {avg_values}")

def calculate_overall_averages(combined_data):
    total_msrresnet_psnr = 0
    total_msrresnet_ssim = 0
    total_swinir_psnr = 0
    total_swinir_ssim = 0
    total_dncnn_psnr = 0
    total_dncnn_ssim = 0
    msrresnet_count = 0
    dncnn_count = 0
    swinir_count = 0

    for data in combined_data.values():
        if 'swinir PSNR' in data and 'swinir SSIM' in data:
            total_swinir_psnr += data['swinir PSNR']
            total_swinir_ssim += data['swinir SSIM']
            swinir_count += 1
        # Summing MSRResNet data
        if 'msrresnet PSNR' in data and 'msrresnet SSIM' in data:
            total_msrresnet_psnr += data['msrresnet PSNR']
            total_msrresnet_ssim += data['msrresnet SSIM']
            msrresnet_count += 1

        # Summing DNCNN data
        if 'dncnn PSNR' in data and 'dncnn SSIM' in data:
            total_dncnn_psnr += data['dncnn PSNR']
            total_dncnn_ssim += data['dncnn SSIM']
            dncnn_count += 1


    # Calculating overall averages
    overall_avg_swinir_psnr = total_swinir_psnr / swinir_count if swinir_count > 0 else None
    overall_avg_swinir_ssim = total_swinir_ssim / swinir_count if swinir_count > 0 else None
    overall_avg_msrresnet_psnr = total_msrresnet_psnr / msrresnet_count if msrresnet_count > 0 else None
    overall_avg_msrresnet_ssim = total_msrresnet_ssim / msrresnet_count if msrresnet_count > 0 else None
    overall_avg_dncnn_psnr = total_dncnn_psnr / dncnn_count if dncnn_count > 0 else None
    overall_avg_dncnn_ssim = total_dncnn_ssim / dncnn_count if dncnn_count > 0 else None

    return {
        'overall_avg_swinir_psnr': overall_avg_swinir_psnr,
        'overall_avg_swinir_ssim': overall_avg_swinir_ssim,
        'overall_avg_msrresnet_psnr': overall_avg_msrresnet_psnr,
        'overall_avg_msrresnet_ssim': overall_avg_msrresnet_ssim,
        'overall_avg_dncnn_psnr': overall_avg_dncnn_psnr,
        'overall_avg_dncnn_ssim': overall_avg_dncnn_ssim
    }


overall_averages = calculate_overall_averages(combined_data)
print(overall_averages)

import pandas as pd

def create_artifact_averages_dataframe(combined_data):
    # Preparing a dictionary to hold the summed values and counts for each artifact
    artifact_sums = {}

    for image_data in combined_data.values():
        artifact_type = image_data['artifact']

        # Initialize dictionary for new artifact type
        if artifact_type not in artifact_sums:
            artifact_sums[artifact_type] = {'swinir_psnr_sum': 0, 'swinir_ssim_sum': 0,  'msrresnet_psnr_sum': 0, 'msrresnet_ssim_sum': 0,
                                          'dncnn_psnr_sum': 0, 'dncnn_ssim_sum': 0, 'count': 0}

        if 'swinir PSNR' in image_data and 'swinir SSIM' in image_data:
            artifact_sums[artifact_type]['swinir_psnr_sum'] += image_data['swinir PSNR']
            artifact_sums[artifact_type]['swinir_ssim_sum'] += image_data['swinir SSIM']

        # Sum PSNR and SSIM for MSRResNet and DNCNN
        if 'msrresnet PSNR' in image_data and 'msrresnet SSIM' in image_data:
            artifact_sums[artifact_type]['msrresnet_psnr_sum'] += image_data['msrresnet PSNR']
            artifact_sums[artifact_type]['msrresnet_ssim_sum'] += image_data['msrresnet SSIM']

        if 'dncnn PSNR' in image_data and 'dncnn SSIM' in image_data:
            artifact_sums[artifact_type]['dncnn_psnr_sum'] += image_data['dncnn PSNR']
            artifact_sums[artifact_type]['dncnn_ssim_sum'] += image_data['dncnn SSIM']



        artifact_sums[artifact_type]['count'] += 1

    # Preparing data for DataFrame
    data_for_df = []
    for artifact, sums in artifact_sums.items():
        row = {
            'Artifact': artifact,
            'SwinIR Avg PSNR': sums['swinir_psnr_sum'] / sums['count'] if sums['count'] > 0 else None,
            'SwinIR Avg SSIM': sums['swinir_ssim_sum'] / sums['count'] if sums['count'] > 0 else None,
            'MSRResNet Avg PSNR': sums['msrresnet_psnr_sum'] / sums['count'] if sums['count'] > 0 else None,
            'MSRResNet Avg SSIM': sums['msrresnet_ssim_sum'] / sums['count'] if sums['count'] > 0 else None,

            'DNCNN Avg PSNR': sums['dncnn_psnr_sum'] / sums['count'] if sums['count'] > 0 else None,
            'DNCNN Avg SSIM': sums['dncnn_ssim_sum'] / sums['count'] if sums['count'] > 0 else None
        }
        data_for_df.append(row)

    # Creating DataFrame
    df = pd.DataFrame(data_for_df)

    return df

# Example usage:
df = create_artifact_averages_dataframe(combined_data)
print(df)

df

# Add a new row with 'Artifact' as 'overall' and values from overall_averages
df = df.append({'Artifact': 'overall',
                'SwinIR Avg PSNR': overall_averages['overall_avg_swinir_psnr'],
                'SwinIR Avg SSIM': overall_averages['overall_avg_swinir_ssim'],
                'MSRResNet Avg PSNR': overall_averages['overall_avg_msrresnet_psnr'],
                'MSRResNet Avg SSIM': overall_averages['overall_avg_msrresnet_ssim'],
                'DNCNN Avg PSNR': overall_averages['overall_avg_dncnn_psnr'],
                'DNCNN Avg SSIM': overall_averages['overall_avg_dncnn_ssim']},
               ignore_index=True)

df.round(2)

df=df.transpose()

filtered_data = []

for filename, info in list_combined_data:
    if info.get('artifact') == 'susceptibility artifact':
        filtered_data.append((filename, info))

print(filtered_data)

filtered_data = []

for filename, info in list_combined_data:
    if info.get('artifact') == 'ghosting artifact':
        filtered_data.append((filename, info))

print(filtered_data)

filtered_data = []

for filename, info in list_combined_data:
    if info.get('artifact') == 'motion artifact':
        filtered_data.append((filename, info))

print(filtered_data)

filtered_data = []

for filename, info in list_combined_data:
    if info.get('artifact') == 'NO artifact':
        filtered_data.append((filename, info))

print(filtered_data)

filtered_data = []

for filename, info in list_combined_data:
    if info.get('artifact') == 'low-SNR artifact':
        filtered_data.append((filename, info))

print(filtered_data)

filename_to_find = 'participant_13_sets_01_frame017B.png'
#'participant_02_sets_04_frame115R.png'

found_entry = None

for filename, info in list_combined_data:
    if filename == filename_to_find:
        found_entry = (filename, info)
        break

if found_entry:
    print(found_entry)
else:
    print(f"Entry with filename '{filename_to_find}' not found.")

from PIL import Image, ImageOps
import matplotlib.pyplot as plt

# Load the images
image_name='participant_13_sets_01_frame017B'
#image_name= 'participant_02_sets_06_frame080B'
#image_name= 'participant_13_sets_06_frame262R'
msrresnet_path = '/content/'+image_name+'-msrresnet.png'
dncnn_path = '/content/'+image_name+'-dncnn.png'
swinir_path= '/content/'+ image_name +'_SwinIR.png'
gt_path = '/content/'+image_name+'-gt.png'
lr_path = '/content/'+image_name+'-lr.png'


msrresnet_image = Image.open(msrresnet_path)
dncnn_image = Image.open(dncnn_path)
swinir_image = Image.open(swinir_path)
gt_image = Image.open(gt_path)
lr_image = Image.open(lr_path)

#make sure all images are the same size as the ground truth image for fair comparison
target_size = gt_image.size

# Resize images if necessary
msrresnet_image = ImageOps.contain(msrresnet_image, target_size)
dncnn_image = ImageOps.contain(dncnn_image, target_size)
swinir_image = ImageOps.contain(swinir_image, target_size)
lr_image = ImageOps.contain(lr_image, target_size)

# Crop the same area from each image for a zoomed comparison
offset=50
#crop_area = (target_size[0]//4, target_size[1]*3//4, target_size[0]*3//4, target_size[1])
#crop_area = ((target_size[0] - target_size[0]//2)//2 + offset, target_size[1] - target_size[0]//2, (target_size[0] + target_size[0]//2)//2 + offset, target_size[1])
#crop_area = (target_size[0]//4, target_size[1]//4, target_size[0]*3//4, target_size[1]//4) #top middle

#crop_area = (target_size[0]//4 + offset, target_size[1]//4, target_size[0]*3//4 + offset, target_size[1]*3//4)
#crop_area = (target_size[0]//4, target_size[1]//4, target_size[0]*3//4, target_size[1]*3//4) #middle
#crop_area = (target_size[0]*3//4, 0, target_size[0], target_size[1]//4)
#crop_area = (target_size[0]//4, 0, target_size[0]*3//4, target_size[1]//2)
#crop_area = (target_size[0] // 4, target_size[1] // 2, target_size[0] * 3 // 4, target_size[1])

#crop_area = (target_size[0] // 2, target_size[1] // 2, target_size[0], target_size[1]) #right middle bottom
#crop_area = (target_size[0] // 2, target_size[1] // 4, target_size[0], target_size[1] * 3 // 4)
#crop_area = (target_size[0] // 4, 0, target_size[0] * 3 // 4, target_size[1] // 2)
crop_area = (target_size[0] // 2, 0, target_size[0], target_size[1] // 2) #top right quarter

#crop_area = (0, 0, target_size[0]//2, target_size[1]//2)  # Top-left quarter
#crop_area = (0, target_size[1]//4, target_size[0]//2, 3*target_size[1]//4)
msrresnet_zoomed = msrresnet_image.crop(crop_area)
dncnn_zoomed = dncnn_image.crop(crop_area)
swinir_zoomed = swinir_image.crop(crop_area)
gt_zoomed = gt_image.crop(crop_area)
lr_zoomed = lr_image.crop(crop_area)

# Display images side by side with titles
fig, axes = plt.subplots(2, 5, figsize=(20, 10))

# Set titles
titles = ['SwinIR', 'MSRResNet', 'DnCNN' ,'Ground Truth', 'Low Resolution with Low SNR']

# Display original images
axes[0, 0].imshow(swinir_image)
axes[0, 1].imshow(msrresnet_image)
axes[0, 2].imshow(dncnn_image)
axes[0, 3].imshow(gt_image)
axes[0, 4].imshow(lr_image)

# Display zoomed images
axes[1, 0].imshow(swinir_image)
axes[1, 1].imshow(msrresnet_image)
axes[1, 2].imshow(dncnn_image)
axes[1, 3].imshow(gt_image)
axes[1, 4].imshow(lr_image)

# Set titles and turn off axis labels
for ax, img, title in zip(axes[0], [swinir_image, msrresnet_image, dncnn_image,  gt_image, lr_image], titles):
    ax.imshow(img)
    ax.set_title(title)
    ax.set_xticks([])
    ax.set_yticks([])


# Display zoomed images with titles
for ax, img, title in zip(axes[1], [swinir_zoomed, msrresnet_zoomed, dncnn_zoomed, gt_zoomed, lr_zoomed], titles):
    ax.imshow(img)
    ax.set_title(title)
    ax.axis('off')




# Adjust layout
plt.tight_layout()
plt.show()

fig, axes = plt.subplots(2, 3, figsize=(20, 10))
titles=['SwinIR', 'Ground Truth', 'Low Resolution']
# Display original images
axes[0, 0].imshow(swinir_image)
axes[0, 1].imshow(gt_image)
axes[0, 2].imshow(lr_image)

# Display zoomed images
axes[1, 0].imshow(swinir_zoomed)
axes[1, 1].imshow(gt_zoomed)
axes[1, 2].imshow(lr_zoomed)

# Set titles and turn off axis labels
for ax, img, title in zip(axes[0], [swinir_image, gt_image, lr_image], titles):
    ax.imshow(img)
    ax.set_title(title)
    ax.set_xticks([])
    ax.set_yticks([])

# Display zoomed images with titles
for ax, img, title in zip(axes[1], [swinir_zoomed, gt_zoomed, lr_zoomed], titles):
    ax.imshow(img)
    ax.set_title(title)
    ax.axis('off')


# Adjust layout
plt.tight_layout()
plt.show()

fig, axes = plt.subplots(2, 3, figsize=(20, 10))
titles=['MSRResNet', 'Ground Truth', 'Low Resolution']
# Display original images
axes[0, 0].imshow(msrresnet_image)
axes[0, 1].imshow(gt_image)
axes[0, 2].imshow(lr_image)

# Display zoomed images
axes[1, 0].imshow(msrresnet_zoomed)
axes[1, 1].imshow(gt_zoomed)
axes[1, 2].imshow(lr_zoomed)

# Set titles and turn off axis labels
for ax, img, title in zip(axes[0], [msrresnet_image, gt_image, lr_image], titles):
    ax.imshow(img)
    ax.set_title(title)
    ax.set_xticks([])
    ax.set_yticks([])

# Display zoomed images with titles
for ax, img, title in zip(axes[1], [msrresnet_zoomed, gt_zoomed, lr_zoomed], titles):
    ax.imshow(img)
    ax.set_title(title)
    ax.axis('off')


# Adjust layout
plt.tight_layout()
plt.show()